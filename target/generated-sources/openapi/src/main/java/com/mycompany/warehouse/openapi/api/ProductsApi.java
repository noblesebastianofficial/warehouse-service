/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycompany.warehouse.openapi.api;

import com.mycompany.warehouse.openapi.model.BadRequest400Response;
import com.mycompany.warehouse.openapi.model.Error500Response;
import com.mycompany.warehouse.openapi.model.NotFound404Response;
import com.mycompany.warehouse.openapi.model.ProductDto;
import com.mycompany.warehouse.openapi.model.SearchRequestDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T19:42:14.392951+02:00[Europe/Amsterdam]")
@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Create new Product
     *
     * @param productDto ProductDto (required)
     * @return OK (status code 201)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create new Product", nickname = "createProduct", notes = "", response = ProductDto.class, tags={ "Products API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = ProductDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = BadRequest400Response.class),
        @ApiResponse(code = 404, message = "Not Found", response = NotFound404Response.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error500Response.class) })
    @PostMapping(
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> _createProduct(@ApiParam(value = "ProductDto" ,required=true )  @Valid @RequestBody ProductDto productDto) {
        return createProduct(productDto);
    }

    // Override this method
    default  ResponseEntity<ProductDto> createProduct(ProductDto productDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"shelfCode\" : \"shelf1\", \"price\" : 5.0, \"name\" : \"table\", \"description\" : \"Green table\", \"boxId\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/search : Retrieves products by given search term
     *
     * @param searchRequestDto SearchRequestDto (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Retrieves products by given search term", nickname = "searchProduct", notes = "", response = ProductDto.class, responseContainer = "List", tags={ "Products API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = BadRequest400Response.class),
        @ApiResponse(code = 404, message = "Not Found", response = NotFound404Response.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error500Response.class) })
    @GetMapping(
        value = "/products/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ProductDto>> _searchProduct(@ApiParam(value = "SearchRequestDto" ,required=true )  @Valid @RequestBody SearchRequestDto searchRequestDto) {
        return searchProduct(searchRequestDto);
    }

    // Override this method
    default  ResponseEntity<List<ProductDto>> searchProduct(SearchRequestDto searchRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"shelfCode\" : \"shelf1\", \"price\" : 5.0, \"name\" : \"table\", \"description\" : \"Green table\", \"boxId\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
